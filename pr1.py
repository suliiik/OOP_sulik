// Клас одинака визначає статичний метод `getInstance`, котрий
// дозволяє клієнтам повторно використовувати одне і теж
// підключення до бази даних по всій програмі.
class Database is
    // Поле для зберігання об'єкта-одинака має бути оголошено
    // статичним.
    private static field instance: Database

    // Конструктор одинака завжди повинен залишатися приватним,
    // аби клієнти не могли самостійно створювати екземпляри
    // цього класу через оператор `new`.
    private constructor Database() is
        // Тут може жити код ініціалізації підключення до
        // сервера баз даних.
        // ...

    // Головний статичний метод одинака служить альтернативою
    // конструктору і є точкою доступу до екземпляра цього
    // класу.
    public static method getInstance() is
        if (Database.instance == null) then
            acquireThreadLock() and then
                // Про всяк випадок, ще раз перевіримо, чи не
                // було створено об'єкт в іншому потоці, поки
                // даний потік чекав на звільнення блокування.
                if (Database.instance == null) then
                    Database.instance = new Database()
        return Database.instance

    // І, нарешті, будь-який клас одинака повинен мати якусь
    // корисну функціональність, яку клієнти будуть запускати
    // через отриманий об'єкт одинака.
    public method query(sql) is
        // Усі запити до бази даних проходитимуть через цей
        // метод. Тому є сенс помістити сюди якусь логіку
        // кешування.
        // ...

class Application is
    method main() is
        Database foo = Database.getInstance()
        foo.query("SELECT ...")
        // ...
        Database bar = Database.getInstance()
        bar.query("SELECT ...")
        // Змінна "bar" містить той самий об'єкт, що і змінна
        // "foo".
